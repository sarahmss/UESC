/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Pratica05.ino                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: smodesto <smodesto@student.42sp.org.br>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/21 09:14:50 by smodesto          #+#    #+#             */
/*   Updated: 2025/05/21 09:14:50 by smodesto         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdint.h>

# define OUTPUT_PIN (1 << PB2)      // Pin 10 (PB2 == OC1B)
# define TOP        457             // (TOP + 1) = f_clk / (N * f_pwm) = 16e6/(35*10^3)
# define LENGTH     583

const uint16_t amostras[583] = { 229, 231, 233, 236, 238, 241, 243, 246, 248, 251, 253, 256, 258, 260, 263, 265, 268, 270, 273, 275, 277, 280, 282, 285, 287, 289, 292, 294, 297, 299, 301, 304, 306, 308, 311, 313, 315, 317, 320, 322, 324, 326, 329, 331, 333, 335, 337, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 383, 385, 387, 389, 391, 392, 394, 396, 397, 399, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 439, 440, 441, 442, 443, 444, 445, 446, 446, 447, 448, 448, 449, 450, 450, 451, 451, 452, 452, 453, 453, 454, 454, 455, 455, 455, 456, 456, 456, 456, 456, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 456, 456, 456, 456, 456, 455, 455, 455, 454, 454, 453, 453, 452, 452, 451, 451, 450, 450, 449, 448, 448, 447, 446, 446, 445, 444, 443, 442, 441, 440, 439, 439, 438, 437, 436, 434, 433, 432, 431, 430, 429, 428, 426, 425, 424, 423, 421, 420, 419, 417, 416, 414, 413, 411, 410, 408, 407, 405, 404, 402, 401, 399, 397, 396, 394, 392, 391, 389, 387, 385, 383, 382, 380, 378, 376, 374, 372, 370, 368, 366, 364, 362, 360, 358, 356, 354, 352, 350, 348, 346, 344, 342, 340, 337, 335, 333, 331, 329, 326, 324, 322, 320, 317, 315, 313, 311, 308, 306, 304, 301, 299, 297, 294, 292, 289, 287, 285, 282, 280, 277, 275, 273, 270, 268, 265, 263, 260, 258, 256, 253, 251, 248, 246, 243, 241, 238, 236, 233, 231, 229, 226, 224, 221, 219, 216, 214, 211, 209, 206, 204, 201, 199, 197, 194, 192, 189, 187, 184, 182, 180, 177, 175, 172, 170, 168, 165, 163, 160, 158, 156, 153, 151, 149, 146, 144, 142, 140, 137, 135, 133, 131, 128, 126, 124, 122, 120, 117, 115, 113, 111, 109, 107, 105, 103, 101, 99, 97, 95, 93, 91, 89, 87, 85, 83, 81, 79, 77, 75, 74, 72, 70, 68, 66, 65, 63, 61, 60, 58, 56, 55, 53, 52, 50, 49, 47, 46, 44, 43, 41, 40, 38, 37, 36, 34, 33, 32, 31, 29, 28, 27, 26, 25, 24, 23, 21, 20, 19, 18, 18, 17, 16, 15, 14, 13, 12, 11, 11, 10, 9, 9, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 43, 44, 46, 47, 49, 50, 52, 53, 55, 56, 58, 60, 61, 63, 65, 66, 68, 70, 72, 74, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 120, 122, 124, 126, 128, 131, 133, 135, 137, 140, 142, 144, 146, 149, 151, 153, 156, 158, 160, 163, 165, 168, 170, 172, 175, 177, 180, 182, 184, 187, 189, 192, 194, 197, 199, 201, 204, 206, 209, 211, 214, 216, 219, 221, 224, 226, 229 };

// ================================= Temporizador 1 - Fast PWM (dc_var) =================================
// F_pwm = F_clk/(N * (TOP + 1)) ; F_clk = 16 MHz   

void    ConfTimer1(){
    DDRB |= OUTPUT_PIN;
    PORTB &= ~OUTPUT_PIN;

    // TCNTn: Timer/Counter register
    TCNT1 = 0;
    OCR1A = 0;
    OCR1B = 0;
    TCCR1A = 0;
    TCCR1B = 0;

    // TCCRnX: Timer/Counter Control Register 
    // COMBnX: Compare Match Output B Mode 
    // COM1B1:0 = 0b10 (non-inverting mode)
    // OC1B -> store 
    TCCR1A |= (1 << COM1B1);   
    TCCR1A &= ~(1 << COM1B0);    

    // Set interrupt on compare match
    TIMSK1 |= (1 << OCIE1A);

    // WGMn: Waveform Generation Mode bit
    // WGM13:0 = 0b1111 (Fast PWM with OCR1A as TOP)
    TCCR1B |= (1 << WGM13);
    TCCR1B |= (1 << WGM12);
    TCCR1A |= (1 << WGM11); 
    TCCR1A |= (1 << WGM10);

    // CSn: Clock select
    // CS12:0 = 0b001 (Prescaler == 1 -> F_clck / 1) 
    TCCR1B &= ~(1 << CS12) ;
    TCCR1B &= ~(1 << CS11);
    TCCR1B |= (1 << CS10); 

    // OCRnX: Outupt Compare Register -> stores the compare value
    OCR1A = TOP;
    OCR1B = amostras[0];
}

/*
    @brief: Define a rotina de interrupção para o temporizador que conta 1ms
*/
ISR (TIMER1_COMPA_vect)
{
    static int n = 1;

    //Serial.println(n);
    OCR1B = amostras[n];
    n = n < LENGTH - 1 ? (n + 1) : 0;
}

void setup(void){
    cli();
    ConfTimer1();
    sei();
}

void loop(void){
    
}

